package co.edu.uco.cognicare.lecturacritica.metacomprension.service;

import java.time.Instant;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import co.edu.uco.cognicare.lecturacritica.metacomprension.dto.ActivityAnswerDto;
import co.edu.uco.cognicare.lecturacritica.metacomprension.exception.ResourceNotFoundException;
import co.edu.uco.cognicare.lecturacritica.metacomprension.model.ActivityAnswer;
import co.edu.uco.cognicare.lecturacritica.metacomprension.model.Subquestion;
import co.edu.uco.cognicare.lecturacritica.metacomprension.repository.ActivityAnswerRepository;
import co.edu.uco.cognicare.lecturacritica.metacomprension.repository.SubquestionRepository;
import jakarta.transaction.Transactional;

@Service
public class ActivityService {

	@Autowired
    private SubquestionRepository subquestionRepository;
	
	@Autowired
	public ActivityService(ActivityAnswerRepository activityAnswerRepository) {
        this.activityAnswerRepository = activityAnswerRepository;
    }

	 @Transactional
    public boolean submitAnswer(ActivityAnswerDto activityAnswerDto) {
        // Evalúa si la respuesta es correcta (puedes implementar la lógica aquí)
        boolean isCorrect = evaluateAnswer(activityAnswerDto);

        // Crear el objeto ActivityAnswer
        ActivityAnswer answer = new ActivityAnswer();
        answer.setActivityId(UUID.fromString(activityAnswerDto.getActivityId()));
        answer.setQuestionId(activityAnswerDto.getQuestionId());
        answer.setSubquestionId(activityAnswerDto.getSubquestionId());
        answer.setSelectedAnswer(activityAnswerDto.getSelectedAnswer());
        answer.setResponseTime(Instant.now().toEpochMilli());

        // Guarda la respuesta en la base de datos
        activityAnswerRepository.save(answer);

        return isCorrect;
    }
	
    public boolean evaluateAnswer(ActivityAnswerDto activityAnswerDto) {
        // Busca la subpregunta específica
        Optional<Subquestion> optionalSubquestion = subquestionRepository.findByIdAndQuestionId(
                activityAnswerDto.getSubquestionId(), activityAnswerDto.getQuestionId());

        if (optionalSubquestion.isPresent()) {
            Subquestion subquestion = optionalSubquestion.get();
            // Compara la respuesta seleccionada con la respuesta correcta
            return subquestion.getCorrectAnswer().equals(activityAnswerDto.getSelectedAnswer());
        } else {
            throw new ResourceNotFoundException("Subpregunta no encontrada");
        }
    }
}